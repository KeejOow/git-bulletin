#!/usr/bin/env ruby
#
# A hook script that is able to interpret important messages, notifications
# and breaking changes as meta data in commit messages. Either a developer
# can add the meta data in a single line bulletin using 'Bulletin: <description>.'
# which is terminated by the end of the line.
#
#   commit aaaa20d49e789642bcd00155c42583fedd83445d
#   Author: Kristof Overdulve <kristof@artict.be>
#   Date:   Fri Jan 16 08:09:30 2015 +0100
#
#       Added file. Bulletin: remember to change the filename
#
# Or as a multi line bulletin where 'Bulletin' is put on a single line and the
# bulletin continues until a blank line is found.
#
#   commit bee8d2a0c70ab6b08e9dc5357119d500cf5a1375
#   Author: Kristof Overdulve <kristof@artict.be>
#   Date:   Fri Jan 16 08:05:41 2015 +0100
#
#       Added file
#
#       Bulletin
#       Multi
#       Line
#       Bulletin
#       Terminated when empty line encountered
#
#       Not included in bulletin anymore
#

KEY = 'Bulletin'
$has_bulletins = false

# Helper functions

def create_bulletin(commit, bulletin)
  if !$has_bulletins
    $has_bulletins = true
    printf "\n\e[0;31m!! Important bulletins:\n"
  end

  printf "\e[0;31mBULLETIN \e[0;32m(commit: #{commit})\n"
  printf "\e[0m#{bulletin}\n"
end

def process_commit_message(commit, commitmessage)
  multilineBulletin = nil

  commitmessage.split("\n").each do |line|
    if multilineBulletin != nil
      # Continue reading until empty line reached
      if line.strip == ""
        create_bulletin commit, multilineBulletin
        multilineBulletin = nil
      else
        multilineBulletin += line + "\n"
      end
    else
      if line == KEY
        # Multiline bulletin starts
        multilineBulletin = ""
      elsif line.index("#{KEY}:")
        # Single line bulletin
        singleLineBulletinIndex = line.index("#{KEY}:")
        singlelineBulletin = line[(singleLineBulletinIndex + "#{KEY}:".length)..-1] + '\n'
        create_bulletin commit, singlelineBulletin
      end
    end
  end

  create_bulletin commit, multilineBulletin if multilineBulletin != nil
end

def show_bulletins_between(prevHEAD, newHEAD)
  commits_in_between = `git rev-list #{prevHEAD}..#{newHEAD}`
  commits_in_between.split("\n").each do |commit|
    commit_message = `git show -s --format=%B #{commit}`
    process_commit_message commit, commit_message
  end
end

# Actual execution

prevHEAD = ARGV[0]
newHEAD = ARGV[1]
checkoutType = ARGV[2]

show_bulletins_between prevHEAD, newHEAD
